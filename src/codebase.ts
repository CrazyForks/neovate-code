/**
 * TODO: this file is generated by llm, need to refactor it
 */
import child_process from 'child_process';
import fs from 'fs';
import path from 'path';
import util from 'util';

const REPOMIX_COMMAND = 'repomix';
const OUTPUT_FILENAME = 'repomix-output.txt';
const MAX_FILE_SIZE_BYTES = 800 * 1024;
const OUTPUT_FILE_PATH = path.resolve(process.cwd(), OUTPUT_FILENAME);

export async function getCodebaseContext(opts: {
  include?: string;
}): Promise<string> {
  const execPromise = util.promisify(child_process.exec);

  const include = opts.include || 'src,package.json,README.md';
  const command = `${REPOMIX_COMMAND} --include "${include}"`;

  if (fs.existsSync(OUTPUT_FILE_PATH)) {
    fs.unlinkSync(OUTPUT_FILE_PATH);
  }
  console.log(`Executing command: ${command}`);

  try {
    const { stdout, stderr } = await execPromise(command);
    if (stdout) console.log('repomix stdout:', stdout);
    if (stderr) console.warn('repomix stderr:', stderr);

    console.log('repomix command executed successfully.');
  } catch (error: any) {
    if (
      error.code === 'ENOENT' ||
      (error.message && error.message.includes('command not found'))
    ) {
      console.error('Error: Global repomix command not found.');
      throw new Error(
        'Global repomix command not found. Please ensure repomix is installed globally and added to the system PATH environment variable.',
      );
    } else {
      console.error('repomix command execution failed:', error);
      throw new Error(`repomix command execution failed: ${error.message}`);
    }
  }

  try {
    const stats = fs.statSync(OUTPUT_FILE_PATH);

    if (stats.size > MAX_FILE_SIZE_BYTES) {
      console.error(
        `Error: ${OUTPUT_FILENAME} file size (${stats.size} bytes) exceeds limit (${MAX_FILE_SIZE_BYTES} bytes).`,
      );
      throw new Error(
        `${OUTPUT_FILENAME} file size (${stats.size} bytes) exceeds limit (${MAX_FILE_SIZE_BYTES} bytes).`,
      );
    }

    console.log(
      `${OUTPUT_FILENAME} file check passed (size: ${stats.size} bytes).`,
    );

    const content = fs.readFileSync(OUTPUT_FILE_PATH, 'utf-8');
    console.log(`Successfully read ${OUTPUT_FILENAME} file content.`);
    return content;
  } catch (error: any) {
    if (error.code === 'ENOENT') {
      console.error(`Error: repomix output file ${OUTPUT_FILENAME} not found.`);
      throw new Error(
        `Output file ${OUTPUT_FILENAME} not found after executing repomix. Please check if repomix successfully generated the file.`,
      );
    } else {
      console.error(`Error reading or checking file ${OUTPUT_FILENAME}:`, error);
      throw new Error(`Error processing file ${OUTPUT_FILENAME}: ${error.message}`);
    }
  }
}
